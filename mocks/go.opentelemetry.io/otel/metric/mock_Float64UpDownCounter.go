// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package metric

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"go.opentelemetry.io/otel/metric"

	_metricotelembedded "go.opentelemetry.io/otel/metric/embedded"
	_traceotelembedded "go.opentelemetry.io/otel/trace/embedded"
)

// NewMockFloat64UpDownCounter creates a new instance of MockFloat64UpDownCounter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFloat64UpDownCounter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFloat64UpDownCounter {
	mock := &MockFloat64UpDownCounter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockFloat64UpDownCounter is an autogenerated mock type for the Float64UpDownCounter type
type MockFloat64UpDownCounter struct {
	mock.Mock
	_metricotelembedded.Meter
	_metricotelembedded.MeterProvider
	_traceotelembedded.Span
	_traceotelembedded.Tracer
	_traceotelembedded.TracerProvider
	_metricotelembedded.Float64Histogram
}

type MockFloat64UpDownCounter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFloat64UpDownCounter) EXPECT() *MockFloat64UpDownCounter_Expecter {
	return &MockFloat64UpDownCounter_Expecter{mock: &_m.Mock}
}

// Add provides a mock function for the type MockFloat64UpDownCounter
func (_mock *MockFloat64UpDownCounter) Add(ctx context.Context, incr float64, options ...metric.AddOption) {
	// metric.AddOption
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, incr)
	_ca = append(_ca, _va...)
	_mock.Called(_ca...)
	return
}

// MockFloat64UpDownCounter_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MockFloat64UpDownCounter_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - ctx context.Context
//   - incr float64
//   - options ...metric.AddOption
func (_e *MockFloat64UpDownCounter_Expecter) Add(ctx interface{}, incr interface{}, options ...interface{}) *MockFloat64UpDownCounter_Add_Call {
	return &MockFloat64UpDownCounter_Add_Call{Call: _e.mock.On("Add",
		append([]interface{}{ctx, incr}, options...)...)}
}

func (_c *MockFloat64UpDownCounter_Add_Call) Run(run func(ctx context.Context, incr float64, options ...metric.AddOption)) *MockFloat64UpDownCounter_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 float64
		if args[1] != nil {
			arg1 = args[1].(float64)
		}
		var arg2 []metric.AddOption
		variadicArgs := make([]metric.AddOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(metric.AddOption)
			}
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockFloat64UpDownCounter_Add_Call) Return() *MockFloat64UpDownCounter_Add_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockFloat64UpDownCounter_Add_Call) RunAndReturn(run func(ctx context.Context, incr float64, options ...metric.AddOption)) *MockFloat64UpDownCounter_Add_Call {
	_c.Run(run)
	return _c
}

// float64UpDownCounter provides a mock function for the type MockFloat64UpDownCounter
func (_mock *MockFloat64UpDownCounter) float64UpDownCounter() {
	_mock.Called()
	return
}

// MockFloat64UpDownCounter_float64UpDownCounter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'float64UpDownCounter'
type MockFloat64UpDownCounter_float64UpDownCounter_Call struct {
	*mock.Call
}

// float64UpDownCounter is a helper method to define mock.On call
func (_e *MockFloat64UpDownCounter_Expecter) float64UpDownCounter() *MockFloat64UpDownCounter_float64UpDownCounter_Call {
	return &MockFloat64UpDownCounter_float64UpDownCounter_Call{Call: _e.mock.On("float64UpDownCounter")}
}

func (_c *MockFloat64UpDownCounter_float64UpDownCounter_Call) Run(run func()) *MockFloat64UpDownCounter_float64UpDownCounter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockFloat64UpDownCounter_float64UpDownCounter_Call) Return() *MockFloat64UpDownCounter_float64UpDownCounter_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockFloat64UpDownCounter_float64UpDownCounter_Call) RunAndReturn(run func()) *MockFloat64UpDownCounter_float64UpDownCounter_Call {
	_c.Run(run)
	return _c
}
