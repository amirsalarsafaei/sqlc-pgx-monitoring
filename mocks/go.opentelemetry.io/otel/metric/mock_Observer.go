// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package metric

import (
	mock "github.com/stretchr/testify/mock"
	"go.opentelemetry.io/otel/metric"

	_metricotelembedded "go.opentelemetry.io/otel/metric/embedded"
	_traceotelembedded "go.opentelemetry.io/otel/trace/embedded"
)

// NewMockObserver creates a new instance of MockObserver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockObserver(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockObserver {
	mock := &MockObserver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockObserver is an autogenerated mock type for the Observer type
type MockObserver struct {
	mock.Mock
	_metricotelembedded.Meter
	_metricotelembedded.MeterProvider
	_traceotelembedded.Span
	_traceotelembedded.Tracer
	_traceotelembedded.TracerProvider
	_metricotelembedded.Float64Histogram
}

type MockObserver_Expecter struct {
	mock *mock.Mock
}

func (_m *MockObserver) EXPECT() *MockObserver_Expecter {
	return &MockObserver_Expecter{mock: &_m.Mock}
}

// ObserveFloat64 provides a mock function for the type MockObserver
func (_mock *MockObserver) ObserveFloat64(obsrv metric.Float64Observable, value float64, opts ...metric.ObserveOption) {
	// metric.ObserveOption
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, obsrv, value)
	_ca = append(_ca, _va...)
	_mock.Called(_ca...)
	return
}

// MockObserver_ObserveFloat64_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ObserveFloat64'
type MockObserver_ObserveFloat64_Call struct {
	*mock.Call
}

// ObserveFloat64 is a helper method to define mock.On call
//   - obsrv metric.Float64Observable
//   - value float64
//   - opts ...metric.ObserveOption
func (_e *MockObserver_Expecter) ObserveFloat64(obsrv interface{}, value interface{}, opts ...interface{}) *MockObserver_ObserveFloat64_Call {
	return &MockObserver_ObserveFloat64_Call{Call: _e.mock.On("ObserveFloat64",
		append([]interface{}{obsrv, value}, opts...)...)}
}

func (_c *MockObserver_ObserveFloat64_Call) Run(run func(obsrv metric.Float64Observable, value float64, opts ...metric.ObserveOption)) *MockObserver_ObserveFloat64_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 metric.Float64Observable
		if args[0] != nil {
			arg0 = args[0].(metric.Float64Observable)
		}
		var arg1 float64
		if args[1] != nil {
			arg1 = args[1].(float64)
		}
		var arg2 []metric.ObserveOption
		variadicArgs := make([]metric.ObserveOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(metric.ObserveOption)
			}
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockObserver_ObserveFloat64_Call) Return() *MockObserver_ObserveFloat64_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockObserver_ObserveFloat64_Call) RunAndReturn(run func(obsrv metric.Float64Observable, value float64, opts ...metric.ObserveOption)) *MockObserver_ObserveFloat64_Call {
	_c.Run(run)
	return _c
}

// ObserveInt64 provides a mock function for the type MockObserver
func (_mock *MockObserver) ObserveInt64(obsrv metric.Int64Observable, value int64, opts ...metric.ObserveOption) {
	// metric.ObserveOption
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, obsrv, value)
	_ca = append(_ca, _va...)
	_mock.Called(_ca...)
	return
}

// MockObserver_ObserveInt64_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ObserveInt64'
type MockObserver_ObserveInt64_Call struct {
	*mock.Call
}

// ObserveInt64 is a helper method to define mock.On call
//   - obsrv metric.Int64Observable
//   - value int64
//   - opts ...metric.ObserveOption
func (_e *MockObserver_Expecter) ObserveInt64(obsrv interface{}, value interface{}, opts ...interface{}) *MockObserver_ObserveInt64_Call {
	return &MockObserver_ObserveInt64_Call{Call: _e.mock.On("ObserveInt64",
		append([]interface{}{obsrv, value}, opts...)...)}
}

func (_c *MockObserver_ObserveInt64_Call) Run(run func(obsrv metric.Int64Observable, value int64, opts ...metric.ObserveOption)) *MockObserver_ObserveInt64_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 metric.Int64Observable
		if args[0] != nil {
			arg0 = args[0].(metric.Int64Observable)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		var arg2 []metric.ObserveOption
		variadicArgs := make([]metric.ObserveOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(metric.ObserveOption)
			}
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockObserver_ObserveInt64_Call) Return() *MockObserver_ObserveInt64_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockObserver_ObserveInt64_Call) RunAndReturn(run func(obsrv metric.Int64Observable, value int64, opts ...metric.ObserveOption)) *MockObserver_ObserveInt64_Call {
	_c.Run(run)
	return _c
}

// observer provides a mock function for the type MockObserver
func (_mock *MockObserver) observer() {
	_mock.Called()
	return
}

// MockObserver_observer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'observer'
type MockObserver_observer_Call struct {
	*mock.Call
}

// observer is a helper method to define mock.On call
func (_e *MockObserver_Expecter) observer() *MockObserver_observer_Call {
	return &MockObserver_observer_Call{Call: _e.mock.On("observer")}
}

func (_c *MockObserver_observer_Call) Run(run func()) *MockObserver_observer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockObserver_observer_Call) Return() *MockObserver_observer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockObserver_observer_Call) RunAndReturn(run func()) *MockObserver_observer_Call {
	_c.Run(run)
	return _c
}
