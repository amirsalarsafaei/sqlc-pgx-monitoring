// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package metric

import (
	mock "github.com/stretchr/testify/mock"
	"go.opentelemetry.io/otel/metric"

	_metricotelembedded "go.opentelemetry.io/otel/metric/embedded"
	_traceotelembedded "go.opentelemetry.io/otel/trace/embedded"
)

// NewMockHistogramOption creates a new instance of MockHistogramOption. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHistogramOption(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHistogramOption {
	mock := &MockHistogramOption{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockHistogramOption is an autogenerated mock type for the HistogramOption type
type MockHistogramOption struct {
	mock.Mock
	_metricotelembedded.Meter
	_metricotelembedded.MeterProvider
	_traceotelembedded.Span
	_traceotelembedded.Tracer
	_traceotelembedded.TracerProvider
	_metricotelembedded.Float64Histogram
}

type MockHistogramOption_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHistogramOption) EXPECT() *MockHistogramOption_Expecter {
	return &MockHistogramOption_Expecter{mock: &_m.Mock}
}

// applyFloat64Histogram provides a mock function for the type MockHistogramOption
func (_mock *MockHistogramOption) applyFloat64Histogram(float64HistogramConfig metric.Float64HistogramConfig) metric.Float64HistogramConfig {
	ret := _mock.Called(float64HistogramConfig)

	if len(ret) == 0 {
		panic("no return value specified for applyFloat64Histogram")
	}

	var r0 metric.Float64HistogramConfig
	if returnFunc, ok := ret.Get(0).(func(metric.Float64HistogramConfig) metric.Float64HistogramConfig); ok {
		r0 = returnFunc(float64HistogramConfig)
	} else {
		r0 = ret.Get(0).(metric.Float64HistogramConfig)
	}
	return r0
}

// MockHistogramOption_applyFloat64Histogram_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'applyFloat64Histogram'
type MockHistogramOption_applyFloat64Histogram_Call struct {
	*mock.Call
}

// applyFloat64Histogram is a helper method to define mock.On call
//   - float64HistogramConfig metric.Float64HistogramConfig
func (_e *MockHistogramOption_Expecter) applyFloat64Histogram(float64HistogramConfig interface{}) *MockHistogramOption_applyFloat64Histogram_Call {
	return &MockHistogramOption_applyFloat64Histogram_Call{Call: _e.mock.On("applyFloat64Histogram", float64HistogramConfig)}
}

func (_c *MockHistogramOption_applyFloat64Histogram_Call) Run(run func(float64HistogramConfig metric.Float64HistogramConfig)) *MockHistogramOption_applyFloat64Histogram_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 metric.Float64HistogramConfig
		if args[0] != nil {
			arg0 = args[0].(metric.Float64HistogramConfig)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockHistogramOption_applyFloat64Histogram_Call) Return(float64HistogramConfig1 metric.Float64HistogramConfig) *MockHistogramOption_applyFloat64Histogram_Call {
	_c.Call.Return(float64HistogramConfig1)
	return _c
}

func (_c *MockHistogramOption_applyFloat64Histogram_Call) RunAndReturn(run func(float64HistogramConfig metric.Float64HistogramConfig) metric.Float64HistogramConfig) *MockHistogramOption_applyFloat64Histogram_Call {
	_c.Call.Return(run)
	return _c
}

// applyInt64Histogram provides a mock function for the type MockHistogramOption
func (_mock *MockHistogramOption) applyInt64Histogram(int64HistogramConfig metric.Int64HistogramConfig) metric.Int64HistogramConfig {
	ret := _mock.Called(int64HistogramConfig)

	if len(ret) == 0 {
		panic("no return value specified for applyInt64Histogram")
	}

	var r0 metric.Int64HistogramConfig
	if returnFunc, ok := ret.Get(0).(func(metric.Int64HistogramConfig) metric.Int64HistogramConfig); ok {
		r0 = returnFunc(int64HistogramConfig)
	} else {
		r0 = ret.Get(0).(metric.Int64HistogramConfig)
	}
	return r0
}

// MockHistogramOption_applyInt64Histogram_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'applyInt64Histogram'
type MockHistogramOption_applyInt64Histogram_Call struct {
	*mock.Call
}

// applyInt64Histogram is a helper method to define mock.On call
//   - int64HistogramConfig metric.Int64HistogramConfig
func (_e *MockHistogramOption_Expecter) applyInt64Histogram(int64HistogramConfig interface{}) *MockHistogramOption_applyInt64Histogram_Call {
	return &MockHistogramOption_applyInt64Histogram_Call{Call: _e.mock.On("applyInt64Histogram", int64HistogramConfig)}
}

func (_c *MockHistogramOption_applyInt64Histogram_Call) Run(run func(int64HistogramConfig metric.Int64HistogramConfig)) *MockHistogramOption_applyInt64Histogram_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 metric.Int64HistogramConfig
		if args[0] != nil {
			arg0 = args[0].(metric.Int64HistogramConfig)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockHistogramOption_applyInt64Histogram_Call) Return(int64HistogramConfig1 metric.Int64HistogramConfig) *MockHistogramOption_applyInt64Histogram_Call {
	_c.Call.Return(int64HistogramConfig1)
	return _c
}

func (_c *MockHistogramOption_applyInt64Histogram_Call) RunAndReturn(run func(int64HistogramConfig metric.Int64HistogramConfig) metric.Int64HistogramConfig) *MockHistogramOption_applyInt64Histogram_Call {
	_c.Call.Return(run)
	return _c
}
