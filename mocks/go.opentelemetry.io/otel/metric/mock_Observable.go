// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package metric

import (
	mock "github.com/stretchr/testify/mock"

	_metricotelembedded "go.opentelemetry.io/otel/metric/embedded"
	_traceotelembedded "go.opentelemetry.io/otel/trace/embedded"
)

// NewMockObservable creates a new instance of MockObservable. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockObservable(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockObservable {
	mock := &MockObservable{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockObservable is an autogenerated mock type for the Observable type
type MockObservable struct {
	mock.Mock
	_metricotelembedded.Meter
	_metricotelembedded.MeterProvider
	_traceotelembedded.Span
	_traceotelembedded.Tracer
	_traceotelembedded.TracerProvider
	_metricotelembedded.Float64Histogram
}

type MockObservable_Expecter struct {
	mock *mock.Mock
}

func (_m *MockObservable) EXPECT() *MockObservable_Expecter {
	return &MockObservable_Expecter{mock: &_m.Mock}
}

// observable provides a mock function for the type MockObservable
func (_mock *MockObservable) observable() {
	_mock.Called()
	return
}

// MockObservable_observable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'observable'
type MockObservable_observable_Call struct {
	*mock.Call
}

// observable is a helper method to define mock.On call
func (_e *MockObservable_Expecter) observable() *MockObservable_observable_Call {
	return &MockObservable_observable_Call{Call: _e.mock.On("observable")}
}

func (_c *MockObservable_observable_Call) Run(run func()) *MockObservable_observable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockObservable_observable_Call) Return() *MockObservable_observable_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockObservable_observable_Call) RunAndReturn(run func()) *MockObservable_observable_Call {
	_c.Run(run)
	return _c
}
