// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package metric

import (
	mock "github.com/stretchr/testify/mock"
	"go.opentelemetry.io/otel/metric"

	_metricotelembedded "go.opentelemetry.io/otel/metric/embedded"
	_traceotelembedded "go.opentelemetry.io/otel/trace/embedded"
)

// NewMockFloat64CounterOption creates a new instance of MockFloat64CounterOption. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFloat64CounterOption(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFloat64CounterOption {
	mock := &MockFloat64CounterOption{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockFloat64CounterOption is an autogenerated mock type for the Float64CounterOption type
type MockFloat64CounterOption struct {
	mock.Mock
	_metricotelembedded.Meter
	_metricotelembedded.MeterProvider
	_traceotelembedded.Span
	_traceotelembedded.Tracer
	_traceotelembedded.TracerProvider
	_metricotelembedded.Float64Histogram
}

type MockFloat64CounterOption_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFloat64CounterOption) EXPECT() *MockFloat64CounterOption_Expecter {
	return &MockFloat64CounterOption_Expecter{mock: &_m.Mock}
}

// applyFloat64Counter provides a mock function for the type MockFloat64CounterOption
func (_mock *MockFloat64CounterOption) applyFloat64Counter(float64CounterConfig metric.Float64CounterConfig) metric.Float64CounterConfig {
	ret := _mock.Called(float64CounterConfig)

	if len(ret) == 0 {
		panic("no return value specified for applyFloat64Counter")
	}

	var r0 metric.Float64CounterConfig
	if returnFunc, ok := ret.Get(0).(func(metric.Float64CounterConfig) metric.Float64CounterConfig); ok {
		r0 = returnFunc(float64CounterConfig)
	} else {
		r0 = ret.Get(0).(metric.Float64CounterConfig)
	}
	return r0
}

// MockFloat64CounterOption_applyFloat64Counter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'applyFloat64Counter'
type MockFloat64CounterOption_applyFloat64Counter_Call struct {
	*mock.Call
}

// applyFloat64Counter is a helper method to define mock.On call
//   - float64CounterConfig metric.Float64CounterConfig
func (_e *MockFloat64CounterOption_Expecter) applyFloat64Counter(float64CounterConfig interface{}) *MockFloat64CounterOption_applyFloat64Counter_Call {
	return &MockFloat64CounterOption_applyFloat64Counter_Call{Call: _e.mock.On("applyFloat64Counter", float64CounterConfig)}
}

func (_c *MockFloat64CounterOption_applyFloat64Counter_Call) Run(run func(float64CounterConfig metric.Float64CounterConfig)) *MockFloat64CounterOption_applyFloat64Counter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 metric.Float64CounterConfig
		if args[0] != nil {
			arg0 = args[0].(metric.Float64CounterConfig)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockFloat64CounterOption_applyFloat64Counter_Call) Return(float64CounterConfig1 metric.Float64CounterConfig) *MockFloat64CounterOption_applyFloat64Counter_Call {
	_c.Call.Return(float64CounterConfig1)
	return _c
}

func (_c *MockFloat64CounterOption_applyFloat64Counter_Call) RunAndReturn(run func(float64CounterConfig metric.Float64CounterConfig) metric.Float64CounterConfig) *MockFloat64CounterOption_applyFloat64Counter_Call {
	_c.Call.Return(run)
	return _c
}
