// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package metric

import (
	mock "github.com/stretchr/testify/mock"
	"go.opentelemetry.io/otel/metric"

	_metricotelembedded "go.opentelemetry.io/otel/metric/embedded"
	_traceotelembedded "go.opentelemetry.io/otel/trace/embedded"
)

// NewMockMeterOption creates a new instance of MockMeterOption. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMeterOption(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMeterOption {
	mock := &MockMeterOption{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockMeterOption is an autogenerated mock type for the MeterOption type
type MockMeterOption struct {
	mock.Mock
	_metricotelembedded.Meter
	_metricotelembedded.MeterProvider
	_traceotelembedded.Span
	_traceotelembedded.Tracer
	_traceotelembedded.TracerProvider
	_metricotelembedded.Float64Histogram
}

type MockMeterOption_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMeterOption) EXPECT() *MockMeterOption_Expecter {
	return &MockMeterOption_Expecter{mock: &_m.Mock}
}

// applyMeter provides a mock function for the type MockMeterOption
func (_mock *MockMeterOption) applyMeter(meterConfig metric.MeterConfig) metric.MeterConfig {
	ret := _mock.Called(meterConfig)

	if len(ret) == 0 {
		panic("no return value specified for applyMeter")
	}

	var r0 metric.MeterConfig
	if returnFunc, ok := ret.Get(0).(func(metric.MeterConfig) metric.MeterConfig); ok {
		r0 = returnFunc(meterConfig)
	} else {
		r0 = ret.Get(0).(metric.MeterConfig)
	}
	return r0
}

// MockMeterOption_applyMeter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'applyMeter'
type MockMeterOption_applyMeter_Call struct {
	*mock.Call
}

// applyMeter is a helper method to define mock.On call
//   - meterConfig metric.MeterConfig
func (_e *MockMeterOption_Expecter) applyMeter(meterConfig interface{}) *MockMeterOption_applyMeter_Call {
	return &MockMeterOption_applyMeter_Call{Call: _e.mock.On("applyMeter", meterConfig)}
}

func (_c *MockMeterOption_applyMeter_Call) Run(run func(meterConfig metric.MeterConfig)) *MockMeterOption_applyMeter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 metric.MeterConfig
		if args[0] != nil {
			arg0 = args[0].(metric.MeterConfig)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockMeterOption_applyMeter_Call) Return(meterConfig1 metric.MeterConfig) *MockMeterOption_applyMeter_Call {
	_c.Call.Return(meterConfig1)
	return _c
}

func (_c *MockMeterOption_applyMeter_Call) RunAndReturn(run func(meterConfig metric.MeterConfig) metric.MeterConfig) *MockMeterOption_applyMeter_Call {
	_c.Call.Return(run)
	return _c
}
