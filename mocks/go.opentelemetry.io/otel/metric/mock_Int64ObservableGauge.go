// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package metric

import (
	mock "github.com/stretchr/testify/mock"

	_metricotelembedded "go.opentelemetry.io/otel/metric/embedded"
	_traceotelembedded "go.opentelemetry.io/otel/trace/embedded"
)

// NewMockInt64ObservableGauge creates a new instance of MockInt64ObservableGauge. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockInt64ObservableGauge(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockInt64ObservableGauge {
	mock := &MockInt64ObservableGauge{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockInt64ObservableGauge is an autogenerated mock type for the Int64ObservableGauge type
type MockInt64ObservableGauge struct {
	mock.Mock
	_metricotelembedded.Meter
	_metricotelembedded.MeterProvider
	_traceotelembedded.Span
	_traceotelembedded.Tracer
	_traceotelembedded.TracerProvider
	_metricotelembedded.Float64Histogram
}

type MockInt64ObservableGauge_Expecter struct {
	mock *mock.Mock
}

func (_m *MockInt64ObservableGauge) EXPECT() *MockInt64ObservableGauge_Expecter {
	return &MockInt64ObservableGauge_Expecter{mock: &_m.Mock}
}

// int64Observable provides a mock function for the type MockInt64ObservableGauge
func (_mock *MockInt64ObservableGauge) int64Observable() {
	_mock.Called()
	return
}

// MockInt64ObservableGauge_int64Observable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'int64Observable'
type MockInt64ObservableGauge_int64Observable_Call struct {
	*mock.Call
}

// int64Observable is a helper method to define mock.On call
func (_e *MockInt64ObservableGauge_Expecter) int64Observable() *MockInt64ObservableGauge_int64Observable_Call {
	return &MockInt64ObservableGauge_int64Observable_Call{Call: _e.mock.On("int64Observable")}
}

func (_c *MockInt64ObservableGauge_int64Observable_Call) Run(run func()) *MockInt64ObservableGauge_int64Observable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockInt64ObservableGauge_int64Observable_Call) Return() *MockInt64ObservableGauge_int64Observable_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockInt64ObservableGauge_int64Observable_Call) RunAndReturn(run func()) *MockInt64ObservableGauge_int64Observable_Call {
	_c.Run(run)
	return _c
}

// int64ObservableGauge provides a mock function for the type MockInt64ObservableGauge
func (_mock *MockInt64ObservableGauge) int64ObservableGauge() {
	_mock.Called()
	return
}

// MockInt64ObservableGauge_int64ObservableGauge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'int64ObservableGauge'
type MockInt64ObservableGauge_int64ObservableGauge_Call struct {
	*mock.Call
}

// int64ObservableGauge is a helper method to define mock.On call
func (_e *MockInt64ObservableGauge_Expecter) int64ObservableGauge() *MockInt64ObservableGauge_int64ObservableGauge_Call {
	return &MockInt64ObservableGauge_int64ObservableGauge_Call{Call: _e.mock.On("int64ObservableGauge")}
}

func (_c *MockInt64ObservableGauge_int64ObservableGauge_Call) Run(run func()) *MockInt64ObservableGauge_int64ObservableGauge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockInt64ObservableGauge_int64ObservableGauge_Call) Return() *MockInt64ObservableGauge_int64ObservableGauge_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockInt64ObservableGauge_int64ObservableGauge_Call) RunAndReturn(run func()) *MockInt64ObservableGauge_int64ObservableGauge_Call {
	_c.Run(run)
	return _c
}

// observable provides a mock function for the type MockInt64ObservableGauge
func (_mock *MockInt64ObservableGauge) observable() {
	_mock.Called()
	return
}

// MockInt64ObservableGauge_observable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'observable'
type MockInt64ObservableGauge_observable_Call struct {
	*mock.Call
}

// observable is a helper method to define mock.On call
func (_e *MockInt64ObservableGauge_Expecter) observable() *MockInt64ObservableGauge_observable_Call {
	return &MockInt64ObservableGauge_observable_Call{Call: _e.mock.On("observable")}
}

func (_c *MockInt64ObservableGauge_observable_Call) Run(run func()) *MockInt64ObservableGauge_observable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockInt64ObservableGauge_observable_Call) Return() *MockInt64ObservableGauge_observable_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockInt64ObservableGauge_observable_Call) RunAndReturn(run func()) *MockInt64ObservableGauge_observable_Call {
	_c.Run(run)
	return _c
}
