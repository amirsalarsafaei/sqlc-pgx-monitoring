// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package metric

import (
	mock "github.com/stretchr/testify/mock"
	"go.opentelemetry.io/otel/metric"

	_metricotelembedded "go.opentelemetry.io/otel/metric/embedded"
	_traceotelembedded "go.opentelemetry.io/otel/trace/embedded"
)

// NewMockInstrumentOption creates a new instance of MockInstrumentOption. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockInstrumentOption(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockInstrumentOption {
	mock := &MockInstrumentOption{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockInstrumentOption is an autogenerated mock type for the InstrumentOption type
type MockInstrumentOption struct {
	mock.Mock
	_metricotelembedded.Meter
	_metricotelembedded.MeterProvider
	_traceotelembedded.Span
	_traceotelembedded.Tracer
	_traceotelembedded.TracerProvider
	_metricotelembedded.Float64Histogram
}

type MockInstrumentOption_Expecter struct {
	mock *mock.Mock
}

func (_m *MockInstrumentOption) EXPECT() *MockInstrumentOption_Expecter {
	return &MockInstrumentOption_Expecter{mock: &_m.Mock}
}

// applyFloat64Counter provides a mock function for the type MockInstrumentOption
func (_mock *MockInstrumentOption) applyFloat64Counter(float64CounterConfig metric.Float64CounterConfig) metric.Float64CounterConfig {
	ret := _mock.Called(float64CounterConfig)

	if len(ret) == 0 {
		panic("no return value specified for applyFloat64Counter")
	}

	var r0 metric.Float64CounterConfig
	if returnFunc, ok := ret.Get(0).(func(metric.Float64CounterConfig) metric.Float64CounterConfig); ok {
		r0 = returnFunc(float64CounterConfig)
	} else {
		r0 = ret.Get(0).(metric.Float64CounterConfig)
	}
	return r0
}

// MockInstrumentOption_applyFloat64Counter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'applyFloat64Counter'
type MockInstrumentOption_applyFloat64Counter_Call struct {
	*mock.Call
}

// applyFloat64Counter is a helper method to define mock.On call
//   - float64CounterConfig metric.Float64CounterConfig
func (_e *MockInstrumentOption_Expecter) applyFloat64Counter(float64CounterConfig interface{}) *MockInstrumentOption_applyFloat64Counter_Call {
	return &MockInstrumentOption_applyFloat64Counter_Call{Call: _e.mock.On("applyFloat64Counter", float64CounterConfig)}
}

func (_c *MockInstrumentOption_applyFloat64Counter_Call) Run(run func(float64CounterConfig metric.Float64CounterConfig)) *MockInstrumentOption_applyFloat64Counter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 metric.Float64CounterConfig
		if args[0] != nil {
			arg0 = args[0].(metric.Float64CounterConfig)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockInstrumentOption_applyFloat64Counter_Call) Return(float64CounterConfig1 metric.Float64CounterConfig) *MockInstrumentOption_applyFloat64Counter_Call {
	_c.Call.Return(float64CounterConfig1)
	return _c
}

func (_c *MockInstrumentOption_applyFloat64Counter_Call) RunAndReturn(run func(float64CounterConfig metric.Float64CounterConfig) metric.Float64CounterConfig) *MockInstrumentOption_applyFloat64Counter_Call {
	_c.Call.Return(run)
	return _c
}

// applyFloat64Gauge provides a mock function for the type MockInstrumentOption
func (_mock *MockInstrumentOption) applyFloat64Gauge(float64GaugeConfig metric.Float64GaugeConfig) metric.Float64GaugeConfig {
	ret := _mock.Called(float64GaugeConfig)

	if len(ret) == 0 {
		panic("no return value specified for applyFloat64Gauge")
	}

	var r0 metric.Float64GaugeConfig
	if returnFunc, ok := ret.Get(0).(func(metric.Float64GaugeConfig) metric.Float64GaugeConfig); ok {
		r0 = returnFunc(float64GaugeConfig)
	} else {
		r0 = ret.Get(0).(metric.Float64GaugeConfig)
	}
	return r0
}

// MockInstrumentOption_applyFloat64Gauge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'applyFloat64Gauge'
type MockInstrumentOption_applyFloat64Gauge_Call struct {
	*mock.Call
}

// applyFloat64Gauge is a helper method to define mock.On call
//   - float64GaugeConfig metric.Float64GaugeConfig
func (_e *MockInstrumentOption_Expecter) applyFloat64Gauge(float64GaugeConfig interface{}) *MockInstrumentOption_applyFloat64Gauge_Call {
	return &MockInstrumentOption_applyFloat64Gauge_Call{Call: _e.mock.On("applyFloat64Gauge", float64GaugeConfig)}
}

func (_c *MockInstrumentOption_applyFloat64Gauge_Call) Run(run func(float64GaugeConfig metric.Float64GaugeConfig)) *MockInstrumentOption_applyFloat64Gauge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 metric.Float64GaugeConfig
		if args[0] != nil {
			arg0 = args[0].(metric.Float64GaugeConfig)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockInstrumentOption_applyFloat64Gauge_Call) Return(float64GaugeConfig1 metric.Float64GaugeConfig) *MockInstrumentOption_applyFloat64Gauge_Call {
	_c.Call.Return(float64GaugeConfig1)
	return _c
}

func (_c *MockInstrumentOption_applyFloat64Gauge_Call) RunAndReturn(run func(float64GaugeConfig metric.Float64GaugeConfig) metric.Float64GaugeConfig) *MockInstrumentOption_applyFloat64Gauge_Call {
	_c.Call.Return(run)
	return _c
}

// applyFloat64Histogram provides a mock function for the type MockInstrumentOption
func (_mock *MockInstrumentOption) applyFloat64Histogram(float64HistogramConfig metric.Float64HistogramConfig) metric.Float64HistogramConfig {
	ret := _mock.Called(float64HistogramConfig)

	if len(ret) == 0 {
		panic("no return value specified for applyFloat64Histogram")
	}

	var r0 metric.Float64HistogramConfig
	if returnFunc, ok := ret.Get(0).(func(metric.Float64HistogramConfig) metric.Float64HistogramConfig); ok {
		r0 = returnFunc(float64HistogramConfig)
	} else {
		r0 = ret.Get(0).(metric.Float64HistogramConfig)
	}
	return r0
}

// MockInstrumentOption_applyFloat64Histogram_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'applyFloat64Histogram'
type MockInstrumentOption_applyFloat64Histogram_Call struct {
	*mock.Call
}

// applyFloat64Histogram is a helper method to define mock.On call
//   - float64HistogramConfig metric.Float64HistogramConfig
func (_e *MockInstrumentOption_Expecter) applyFloat64Histogram(float64HistogramConfig interface{}) *MockInstrumentOption_applyFloat64Histogram_Call {
	return &MockInstrumentOption_applyFloat64Histogram_Call{Call: _e.mock.On("applyFloat64Histogram", float64HistogramConfig)}
}

func (_c *MockInstrumentOption_applyFloat64Histogram_Call) Run(run func(float64HistogramConfig metric.Float64HistogramConfig)) *MockInstrumentOption_applyFloat64Histogram_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 metric.Float64HistogramConfig
		if args[0] != nil {
			arg0 = args[0].(metric.Float64HistogramConfig)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockInstrumentOption_applyFloat64Histogram_Call) Return(float64HistogramConfig1 metric.Float64HistogramConfig) *MockInstrumentOption_applyFloat64Histogram_Call {
	_c.Call.Return(float64HistogramConfig1)
	return _c
}

func (_c *MockInstrumentOption_applyFloat64Histogram_Call) RunAndReturn(run func(float64HistogramConfig metric.Float64HistogramConfig) metric.Float64HistogramConfig) *MockInstrumentOption_applyFloat64Histogram_Call {
	_c.Call.Return(run)
	return _c
}

// applyFloat64ObservableCounter provides a mock function for the type MockInstrumentOption
func (_mock *MockInstrumentOption) applyFloat64ObservableCounter(float64ObservableCounterConfig metric.Float64ObservableCounterConfig) metric.Float64ObservableCounterConfig {
	ret := _mock.Called(float64ObservableCounterConfig)

	if len(ret) == 0 {
		panic("no return value specified for applyFloat64ObservableCounter")
	}

	var r0 metric.Float64ObservableCounterConfig
	if returnFunc, ok := ret.Get(0).(func(metric.Float64ObservableCounterConfig) metric.Float64ObservableCounterConfig); ok {
		r0 = returnFunc(float64ObservableCounterConfig)
	} else {
		r0 = ret.Get(0).(metric.Float64ObservableCounterConfig)
	}
	return r0
}

// MockInstrumentOption_applyFloat64ObservableCounter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'applyFloat64ObservableCounter'
type MockInstrumentOption_applyFloat64ObservableCounter_Call struct {
	*mock.Call
}

// applyFloat64ObservableCounter is a helper method to define mock.On call
//   - float64ObservableCounterConfig metric.Float64ObservableCounterConfig
func (_e *MockInstrumentOption_Expecter) applyFloat64ObservableCounter(float64ObservableCounterConfig interface{}) *MockInstrumentOption_applyFloat64ObservableCounter_Call {
	return &MockInstrumentOption_applyFloat64ObservableCounter_Call{Call: _e.mock.On("applyFloat64ObservableCounter", float64ObservableCounterConfig)}
}

func (_c *MockInstrumentOption_applyFloat64ObservableCounter_Call) Run(run func(float64ObservableCounterConfig metric.Float64ObservableCounterConfig)) *MockInstrumentOption_applyFloat64ObservableCounter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 metric.Float64ObservableCounterConfig
		if args[0] != nil {
			arg0 = args[0].(metric.Float64ObservableCounterConfig)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockInstrumentOption_applyFloat64ObservableCounter_Call) Return(float64ObservableCounterConfig1 metric.Float64ObservableCounterConfig) *MockInstrumentOption_applyFloat64ObservableCounter_Call {
	_c.Call.Return(float64ObservableCounterConfig1)
	return _c
}

func (_c *MockInstrumentOption_applyFloat64ObservableCounter_Call) RunAndReturn(run func(float64ObservableCounterConfig metric.Float64ObservableCounterConfig) metric.Float64ObservableCounterConfig) *MockInstrumentOption_applyFloat64ObservableCounter_Call {
	_c.Call.Return(run)
	return _c
}

// applyFloat64ObservableGauge provides a mock function for the type MockInstrumentOption
func (_mock *MockInstrumentOption) applyFloat64ObservableGauge(float64ObservableGaugeConfig metric.Float64ObservableGaugeConfig) metric.Float64ObservableGaugeConfig {
	ret := _mock.Called(float64ObservableGaugeConfig)

	if len(ret) == 0 {
		panic("no return value specified for applyFloat64ObservableGauge")
	}

	var r0 metric.Float64ObservableGaugeConfig
	if returnFunc, ok := ret.Get(0).(func(metric.Float64ObservableGaugeConfig) metric.Float64ObservableGaugeConfig); ok {
		r0 = returnFunc(float64ObservableGaugeConfig)
	} else {
		r0 = ret.Get(0).(metric.Float64ObservableGaugeConfig)
	}
	return r0
}

// MockInstrumentOption_applyFloat64ObservableGauge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'applyFloat64ObservableGauge'
type MockInstrumentOption_applyFloat64ObservableGauge_Call struct {
	*mock.Call
}

// applyFloat64ObservableGauge is a helper method to define mock.On call
//   - float64ObservableGaugeConfig metric.Float64ObservableGaugeConfig
func (_e *MockInstrumentOption_Expecter) applyFloat64ObservableGauge(float64ObservableGaugeConfig interface{}) *MockInstrumentOption_applyFloat64ObservableGauge_Call {
	return &MockInstrumentOption_applyFloat64ObservableGauge_Call{Call: _e.mock.On("applyFloat64ObservableGauge", float64ObservableGaugeConfig)}
}

func (_c *MockInstrumentOption_applyFloat64ObservableGauge_Call) Run(run func(float64ObservableGaugeConfig metric.Float64ObservableGaugeConfig)) *MockInstrumentOption_applyFloat64ObservableGauge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 metric.Float64ObservableGaugeConfig
		if args[0] != nil {
			arg0 = args[0].(metric.Float64ObservableGaugeConfig)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockInstrumentOption_applyFloat64ObservableGauge_Call) Return(float64ObservableGaugeConfig1 metric.Float64ObservableGaugeConfig) *MockInstrumentOption_applyFloat64ObservableGauge_Call {
	_c.Call.Return(float64ObservableGaugeConfig1)
	return _c
}

func (_c *MockInstrumentOption_applyFloat64ObservableGauge_Call) RunAndReturn(run func(float64ObservableGaugeConfig metric.Float64ObservableGaugeConfig) metric.Float64ObservableGaugeConfig) *MockInstrumentOption_applyFloat64ObservableGauge_Call {
	_c.Call.Return(run)
	return _c
}

// applyFloat64ObservableUpDownCounter provides a mock function for the type MockInstrumentOption
func (_mock *MockInstrumentOption) applyFloat64ObservableUpDownCounter(float64ObservableUpDownCounterConfig metric.Float64ObservableUpDownCounterConfig) metric.Float64ObservableUpDownCounterConfig {
	ret := _mock.Called(float64ObservableUpDownCounterConfig)

	if len(ret) == 0 {
		panic("no return value specified for applyFloat64ObservableUpDownCounter")
	}

	var r0 metric.Float64ObservableUpDownCounterConfig
	if returnFunc, ok := ret.Get(0).(func(metric.Float64ObservableUpDownCounterConfig) metric.Float64ObservableUpDownCounterConfig); ok {
		r0 = returnFunc(float64ObservableUpDownCounterConfig)
	} else {
		r0 = ret.Get(0).(metric.Float64ObservableUpDownCounterConfig)
	}
	return r0
}

// MockInstrumentOption_applyFloat64ObservableUpDownCounter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'applyFloat64ObservableUpDownCounter'
type MockInstrumentOption_applyFloat64ObservableUpDownCounter_Call struct {
	*mock.Call
}

// applyFloat64ObservableUpDownCounter is a helper method to define mock.On call
//   - float64ObservableUpDownCounterConfig metric.Float64ObservableUpDownCounterConfig
func (_e *MockInstrumentOption_Expecter) applyFloat64ObservableUpDownCounter(float64ObservableUpDownCounterConfig interface{}) *MockInstrumentOption_applyFloat64ObservableUpDownCounter_Call {
	return &MockInstrumentOption_applyFloat64ObservableUpDownCounter_Call{Call: _e.mock.On("applyFloat64ObservableUpDownCounter", float64ObservableUpDownCounterConfig)}
}

func (_c *MockInstrumentOption_applyFloat64ObservableUpDownCounter_Call) Run(run func(float64ObservableUpDownCounterConfig metric.Float64ObservableUpDownCounterConfig)) *MockInstrumentOption_applyFloat64ObservableUpDownCounter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 metric.Float64ObservableUpDownCounterConfig
		if args[0] != nil {
			arg0 = args[0].(metric.Float64ObservableUpDownCounterConfig)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockInstrumentOption_applyFloat64ObservableUpDownCounter_Call) Return(float64ObservableUpDownCounterConfig1 metric.Float64ObservableUpDownCounterConfig) *MockInstrumentOption_applyFloat64ObservableUpDownCounter_Call {
	_c.Call.Return(float64ObservableUpDownCounterConfig1)
	return _c
}

func (_c *MockInstrumentOption_applyFloat64ObservableUpDownCounter_Call) RunAndReturn(run func(float64ObservableUpDownCounterConfig metric.Float64ObservableUpDownCounterConfig) metric.Float64ObservableUpDownCounterConfig) *MockInstrumentOption_applyFloat64ObservableUpDownCounter_Call {
	_c.Call.Return(run)
	return _c
}

// applyFloat64UpDownCounter provides a mock function for the type MockInstrumentOption
func (_mock *MockInstrumentOption) applyFloat64UpDownCounter(float64UpDownCounterConfig metric.Float64UpDownCounterConfig) metric.Float64UpDownCounterConfig {
	ret := _mock.Called(float64UpDownCounterConfig)

	if len(ret) == 0 {
		panic("no return value specified for applyFloat64UpDownCounter")
	}

	var r0 metric.Float64UpDownCounterConfig
	if returnFunc, ok := ret.Get(0).(func(metric.Float64UpDownCounterConfig) metric.Float64UpDownCounterConfig); ok {
		r0 = returnFunc(float64UpDownCounterConfig)
	} else {
		r0 = ret.Get(0).(metric.Float64UpDownCounterConfig)
	}
	return r0
}

// MockInstrumentOption_applyFloat64UpDownCounter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'applyFloat64UpDownCounter'
type MockInstrumentOption_applyFloat64UpDownCounter_Call struct {
	*mock.Call
}

// applyFloat64UpDownCounter is a helper method to define mock.On call
//   - float64UpDownCounterConfig metric.Float64UpDownCounterConfig
func (_e *MockInstrumentOption_Expecter) applyFloat64UpDownCounter(float64UpDownCounterConfig interface{}) *MockInstrumentOption_applyFloat64UpDownCounter_Call {
	return &MockInstrumentOption_applyFloat64UpDownCounter_Call{Call: _e.mock.On("applyFloat64UpDownCounter", float64UpDownCounterConfig)}
}

func (_c *MockInstrumentOption_applyFloat64UpDownCounter_Call) Run(run func(float64UpDownCounterConfig metric.Float64UpDownCounterConfig)) *MockInstrumentOption_applyFloat64UpDownCounter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 metric.Float64UpDownCounterConfig
		if args[0] != nil {
			arg0 = args[0].(metric.Float64UpDownCounterConfig)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockInstrumentOption_applyFloat64UpDownCounter_Call) Return(float64UpDownCounterConfig1 metric.Float64UpDownCounterConfig) *MockInstrumentOption_applyFloat64UpDownCounter_Call {
	_c.Call.Return(float64UpDownCounterConfig1)
	return _c
}

func (_c *MockInstrumentOption_applyFloat64UpDownCounter_Call) RunAndReturn(run func(float64UpDownCounterConfig metric.Float64UpDownCounterConfig) metric.Float64UpDownCounterConfig) *MockInstrumentOption_applyFloat64UpDownCounter_Call {
	_c.Call.Return(run)
	return _c
}

// applyInt64Counter provides a mock function for the type MockInstrumentOption
func (_mock *MockInstrumentOption) applyInt64Counter(int64CounterConfig metric.Int64CounterConfig) metric.Int64CounterConfig {
	ret := _mock.Called(int64CounterConfig)

	if len(ret) == 0 {
		panic("no return value specified for applyInt64Counter")
	}

	var r0 metric.Int64CounterConfig
	if returnFunc, ok := ret.Get(0).(func(metric.Int64CounterConfig) metric.Int64CounterConfig); ok {
		r0 = returnFunc(int64CounterConfig)
	} else {
		r0 = ret.Get(0).(metric.Int64CounterConfig)
	}
	return r0
}

// MockInstrumentOption_applyInt64Counter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'applyInt64Counter'
type MockInstrumentOption_applyInt64Counter_Call struct {
	*mock.Call
}

// applyInt64Counter is a helper method to define mock.On call
//   - int64CounterConfig metric.Int64CounterConfig
func (_e *MockInstrumentOption_Expecter) applyInt64Counter(int64CounterConfig interface{}) *MockInstrumentOption_applyInt64Counter_Call {
	return &MockInstrumentOption_applyInt64Counter_Call{Call: _e.mock.On("applyInt64Counter", int64CounterConfig)}
}

func (_c *MockInstrumentOption_applyInt64Counter_Call) Run(run func(int64CounterConfig metric.Int64CounterConfig)) *MockInstrumentOption_applyInt64Counter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 metric.Int64CounterConfig
		if args[0] != nil {
			arg0 = args[0].(metric.Int64CounterConfig)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockInstrumentOption_applyInt64Counter_Call) Return(int64CounterConfig1 metric.Int64CounterConfig) *MockInstrumentOption_applyInt64Counter_Call {
	_c.Call.Return(int64CounterConfig1)
	return _c
}

func (_c *MockInstrumentOption_applyInt64Counter_Call) RunAndReturn(run func(int64CounterConfig metric.Int64CounterConfig) metric.Int64CounterConfig) *MockInstrumentOption_applyInt64Counter_Call {
	_c.Call.Return(run)
	return _c
}

// applyInt64Gauge provides a mock function for the type MockInstrumentOption
func (_mock *MockInstrumentOption) applyInt64Gauge(int64GaugeConfig metric.Int64GaugeConfig) metric.Int64GaugeConfig {
	ret := _mock.Called(int64GaugeConfig)

	if len(ret) == 0 {
		panic("no return value specified for applyInt64Gauge")
	}

	var r0 metric.Int64GaugeConfig
	if returnFunc, ok := ret.Get(0).(func(metric.Int64GaugeConfig) metric.Int64GaugeConfig); ok {
		r0 = returnFunc(int64GaugeConfig)
	} else {
		r0 = ret.Get(0).(metric.Int64GaugeConfig)
	}
	return r0
}

// MockInstrumentOption_applyInt64Gauge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'applyInt64Gauge'
type MockInstrumentOption_applyInt64Gauge_Call struct {
	*mock.Call
}

// applyInt64Gauge is a helper method to define mock.On call
//   - int64GaugeConfig metric.Int64GaugeConfig
func (_e *MockInstrumentOption_Expecter) applyInt64Gauge(int64GaugeConfig interface{}) *MockInstrumentOption_applyInt64Gauge_Call {
	return &MockInstrumentOption_applyInt64Gauge_Call{Call: _e.mock.On("applyInt64Gauge", int64GaugeConfig)}
}

func (_c *MockInstrumentOption_applyInt64Gauge_Call) Run(run func(int64GaugeConfig metric.Int64GaugeConfig)) *MockInstrumentOption_applyInt64Gauge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 metric.Int64GaugeConfig
		if args[0] != nil {
			arg0 = args[0].(metric.Int64GaugeConfig)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockInstrumentOption_applyInt64Gauge_Call) Return(int64GaugeConfig1 metric.Int64GaugeConfig) *MockInstrumentOption_applyInt64Gauge_Call {
	_c.Call.Return(int64GaugeConfig1)
	return _c
}

func (_c *MockInstrumentOption_applyInt64Gauge_Call) RunAndReturn(run func(int64GaugeConfig metric.Int64GaugeConfig) metric.Int64GaugeConfig) *MockInstrumentOption_applyInt64Gauge_Call {
	_c.Call.Return(run)
	return _c
}

// applyInt64Histogram provides a mock function for the type MockInstrumentOption
func (_mock *MockInstrumentOption) applyInt64Histogram(int64HistogramConfig metric.Int64HistogramConfig) metric.Int64HistogramConfig {
	ret := _mock.Called(int64HistogramConfig)

	if len(ret) == 0 {
		panic("no return value specified for applyInt64Histogram")
	}

	var r0 metric.Int64HistogramConfig
	if returnFunc, ok := ret.Get(0).(func(metric.Int64HistogramConfig) metric.Int64HistogramConfig); ok {
		r0 = returnFunc(int64HistogramConfig)
	} else {
		r0 = ret.Get(0).(metric.Int64HistogramConfig)
	}
	return r0
}

// MockInstrumentOption_applyInt64Histogram_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'applyInt64Histogram'
type MockInstrumentOption_applyInt64Histogram_Call struct {
	*mock.Call
}

// applyInt64Histogram is a helper method to define mock.On call
//   - int64HistogramConfig metric.Int64HistogramConfig
func (_e *MockInstrumentOption_Expecter) applyInt64Histogram(int64HistogramConfig interface{}) *MockInstrumentOption_applyInt64Histogram_Call {
	return &MockInstrumentOption_applyInt64Histogram_Call{Call: _e.mock.On("applyInt64Histogram", int64HistogramConfig)}
}

func (_c *MockInstrumentOption_applyInt64Histogram_Call) Run(run func(int64HistogramConfig metric.Int64HistogramConfig)) *MockInstrumentOption_applyInt64Histogram_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 metric.Int64HistogramConfig
		if args[0] != nil {
			arg0 = args[0].(metric.Int64HistogramConfig)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockInstrumentOption_applyInt64Histogram_Call) Return(int64HistogramConfig1 metric.Int64HistogramConfig) *MockInstrumentOption_applyInt64Histogram_Call {
	_c.Call.Return(int64HistogramConfig1)
	return _c
}

func (_c *MockInstrumentOption_applyInt64Histogram_Call) RunAndReturn(run func(int64HistogramConfig metric.Int64HistogramConfig) metric.Int64HistogramConfig) *MockInstrumentOption_applyInt64Histogram_Call {
	_c.Call.Return(run)
	return _c
}

// applyInt64ObservableCounter provides a mock function for the type MockInstrumentOption
func (_mock *MockInstrumentOption) applyInt64ObservableCounter(int64ObservableCounterConfig metric.Int64ObservableCounterConfig) metric.Int64ObservableCounterConfig {
	ret := _mock.Called(int64ObservableCounterConfig)

	if len(ret) == 0 {
		panic("no return value specified for applyInt64ObservableCounter")
	}

	var r0 metric.Int64ObservableCounterConfig
	if returnFunc, ok := ret.Get(0).(func(metric.Int64ObservableCounterConfig) metric.Int64ObservableCounterConfig); ok {
		r0 = returnFunc(int64ObservableCounterConfig)
	} else {
		r0 = ret.Get(0).(metric.Int64ObservableCounterConfig)
	}
	return r0
}

// MockInstrumentOption_applyInt64ObservableCounter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'applyInt64ObservableCounter'
type MockInstrumentOption_applyInt64ObservableCounter_Call struct {
	*mock.Call
}

// applyInt64ObservableCounter is a helper method to define mock.On call
//   - int64ObservableCounterConfig metric.Int64ObservableCounterConfig
func (_e *MockInstrumentOption_Expecter) applyInt64ObservableCounter(int64ObservableCounterConfig interface{}) *MockInstrumentOption_applyInt64ObservableCounter_Call {
	return &MockInstrumentOption_applyInt64ObservableCounter_Call{Call: _e.mock.On("applyInt64ObservableCounter", int64ObservableCounterConfig)}
}

func (_c *MockInstrumentOption_applyInt64ObservableCounter_Call) Run(run func(int64ObservableCounterConfig metric.Int64ObservableCounterConfig)) *MockInstrumentOption_applyInt64ObservableCounter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 metric.Int64ObservableCounterConfig
		if args[0] != nil {
			arg0 = args[0].(metric.Int64ObservableCounterConfig)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockInstrumentOption_applyInt64ObservableCounter_Call) Return(int64ObservableCounterConfig1 metric.Int64ObservableCounterConfig) *MockInstrumentOption_applyInt64ObservableCounter_Call {
	_c.Call.Return(int64ObservableCounterConfig1)
	return _c
}

func (_c *MockInstrumentOption_applyInt64ObservableCounter_Call) RunAndReturn(run func(int64ObservableCounterConfig metric.Int64ObservableCounterConfig) metric.Int64ObservableCounterConfig) *MockInstrumentOption_applyInt64ObservableCounter_Call {
	_c.Call.Return(run)
	return _c
}

// applyInt64ObservableGauge provides a mock function for the type MockInstrumentOption
func (_mock *MockInstrumentOption) applyInt64ObservableGauge(int64ObservableGaugeConfig metric.Int64ObservableGaugeConfig) metric.Int64ObservableGaugeConfig {
	ret := _mock.Called(int64ObservableGaugeConfig)

	if len(ret) == 0 {
		panic("no return value specified for applyInt64ObservableGauge")
	}

	var r0 metric.Int64ObservableGaugeConfig
	if returnFunc, ok := ret.Get(0).(func(metric.Int64ObservableGaugeConfig) metric.Int64ObservableGaugeConfig); ok {
		r0 = returnFunc(int64ObservableGaugeConfig)
	} else {
		r0 = ret.Get(0).(metric.Int64ObservableGaugeConfig)
	}
	return r0
}

// MockInstrumentOption_applyInt64ObservableGauge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'applyInt64ObservableGauge'
type MockInstrumentOption_applyInt64ObservableGauge_Call struct {
	*mock.Call
}

// applyInt64ObservableGauge is a helper method to define mock.On call
//   - int64ObservableGaugeConfig metric.Int64ObservableGaugeConfig
func (_e *MockInstrumentOption_Expecter) applyInt64ObservableGauge(int64ObservableGaugeConfig interface{}) *MockInstrumentOption_applyInt64ObservableGauge_Call {
	return &MockInstrumentOption_applyInt64ObservableGauge_Call{Call: _e.mock.On("applyInt64ObservableGauge", int64ObservableGaugeConfig)}
}

func (_c *MockInstrumentOption_applyInt64ObservableGauge_Call) Run(run func(int64ObservableGaugeConfig metric.Int64ObservableGaugeConfig)) *MockInstrumentOption_applyInt64ObservableGauge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 metric.Int64ObservableGaugeConfig
		if args[0] != nil {
			arg0 = args[0].(metric.Int64ObservableGaugeConfig)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockInstrumentOption_applyInt64ObservableGauge_Call) Return(int64ObservableGaugeConfig1 metric.Int64ObservableGaugeConfig) *MockInstrumentOption_applyInt64ObservableGauge_Call {
	_c.Call.Return(int64ObservableGaugeConfig1)
	return _c
}

func (_c *MockInstrumentOption_applyInt64ObservableGauge_Call) RunAndReturn(run func(int64ObservableGaugeConfig metric.Int64ObservableGaugeConfig) metric.Int64ObservableGaugeConfig) *MockInstrumentOption_applyInt64ObservableGauge_Call {
	_c.Call.Return(run)
	return _c
}

// applyInt64ObservableUpDownCounter provides a mock function for the type MockInstrumentOption
func (_mock *MockInstrumentOption) applyInt64ObservableUpDownCounter(int64ObservableUpDownCounterConfig metric.Int64ObservableUpDownCounterConfig) metric.Int64ObservableUpDownCounterConfig {
	ret := _mock.Called(int64ObservableUpDownCounterConfig)

	if len(ret) == 0 {
		panic("no return value specified for applyInt64ObservableUpDownCounter")
	}

	var r0 metric.Int64ObservableUpDownCounterConfig
	if returnFunc, ok := ret.Get(0).(func(metric.Int64ObservableUpDownCounterConfig) metric.Int64ObservableUpDownCounterConfig); ok {
		r0 = returnFunc(int64ObservableUpDownCounterConfig)
	} else {
		r0 = ret.Get(0).(metric.Int64ObservableUpDownCounterConfig)
	}
	return r0
}

// MockInstrumentOption_applyInt64ObservableUpDownCounter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'applyInt64ObservableUpDownCounter'
type MockInstrumentOption_applyInt64ObservableUpDownCounter_Call struct {
	*mock.Call
}

// applyInt64ObservableUpDownCounter is a helper method to define mock.On call
//   - int64ObservableUpDownCounterConfig metric.Int64ObservableUpDownCounterConfig
func (_e *MockInstrumentOption_Expecter) applyInt64ObservableUpDownCounter(int64ObservableUpDownCounterConfig interface{}) *MockInstrumentOption_applyInt64ObservableUpDownCounter_Call {
	return &MockInstrumentOption_applyInt64ObservableUpDownCounter_Call{Call: _e.mock.On("applyInt64ObservableUpDownCounter", int64ObservableUpDownCounterConfig)}
}

func (_c *MockInstrumentOption_applyInt64ObservableUpDownCounter_Call) Run(run func(int64ObservableUpDownCounterConfig metric.Int64ObservableUpDownCounterConfig)) *MockInstrumentOption_applyInt64ObservableUpDownCounter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 metric.Int64ObservableUpDownCounterConfig
		if args[0] != nil {
			arg0 = args[0].(metric.Int64ObservableUpDownCounterConfig)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockInstrumentOption_applyInt64ObservableUpDownCounter_Call) Return(int64ObservableUpDownCounterConfig1 metric.Int64ObservableUpDownCounterConfig) *MockInstrumentOption_applyInt64ObservableUpDownCounter_Call {
	_c.Call.Return(int64ObservableUpDownCounterConfig1)
	return _c
}

func (_c *MockInstrumentOption_applyInt64ObservableUpDownCounter_Call) RunAndReturn(run func(int64ObservableUpDownCounterConfig metric.Int64ObservableUpDownCounterConfig) metric.Int64ObservableUpDownCounterConfig) *MockInstrumentOption_applyInt64ObservableUpDownCounter_Call {
	_c.Call.Return(run)
	return _c
}

// applyInt64UpDownCounter provides a mock function for the type MockInstrumentOption
func (_mock *MockInstrumentOption) applyInt64UpDownCounter(int64UpDownCounterConfig metric.Int64UpDownCounterConfig) metric.Int64UpDownCounterConfig {
	ret := _mock.Called(int64UpDownCounterConfig)

	if len(ret) == 0 {
		panic("no return value specified for applyInt64UpDownCounter")
	}

	var r0 metric.Int64UpDownCounterConfig
	if returnFunc, ok := ret.Get(0).(func(metric.Int64UpDownCounterConfig) metric.Int64UpDownCounterConfig); ok {
		r0 = returnFunc(int64UpDownCounterConfig)
	} else {
		r0 = ret.Get(0).(metric.Int64UpDownCounterConfig)
	}
	return r0
}

// MockInstrumentOption_applyInt64UpDownCounter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'applyInt64UpDownCounter'
type MockInstrumentOption_applyInt64UpDownCounter_Call struct {
	*mock.Call
}

// applyInt64UpDownCounter is a helper method to define mock.On call
//   - int64UpDownCounterConfig metric.Int64UpDownCounterConfig
func (_e *MockInstrumentOption_Expecter) applyInt64UpDownCounter(int64UpDownCounterConfig interface{}) *MockInstrumentOption_applyInt64UpDownCounter_Call {
	return &MockInstrumentOption_applyInt64UpDownCounter_Call{Call: _e.mock.On("applyInt64UpDownCounter", int64UpDownCounterConfig)}
}

func (_c *MockInstrumentOption_applyInt64UpDownCounter_Call) Run(run func(int64UpDownCounterConfig metric.Int64UpDownCounterConfig)) *MockInstrumentOption_applyInt64UpDownCounter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 metric.Int64UpDownCounterConfig
		if args[0] != nil {
			arg0 = args[0].(metric.Int64UpDownCounterConfig)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockInstrumentOption_applyInt64UpDownCounter_Call) Return(int64UpDownCounterConfig1 metric.Int64UpDownCounterConfig) *MockInstrumentOption_applyInt64UpDownCounter_Call {
	_c.Call.Return(int64UpDownCounterConfig1)
	return _c
}

func (_c *MockInstrumentOption_applyInt64UpDownCounter_Call) RunAndReturn(run func(int64UpDownCounterConfig metric.Int64UpDownCounterConfig) metric.Int64UpDownCounterConfig) *MockInstrumentOption_applyInt64UpDownCounter_Call {
	_c.Call.Return(run)
	return _c
}
