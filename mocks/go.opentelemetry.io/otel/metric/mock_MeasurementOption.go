// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package metric

import (
	mock "github.com/stretchr/testify/mock"
	"go.opentelemetry.io/otel/metric"

	_metricotelembedded "go.opentelemetry.io/otel/metric/embedded"
	_traceotelembedded "go.opentelemetry.io/otel/trace/embedded"
)

// NewMockMeasurementOption creates a new instance of MockMeasurementOption. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMeasurementOption(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMeasurementOption {
	mock := &MockMeasurementOption{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockMeasurementOption is an autogenerated mock type for the MeasurementOption type
type MockMeasurementOption struct {
	mock.Mock
	_metricotelembedded.Meter
	_metricotelembedded.MeterProvider
	_traceotelembedded.Span
	_traceotelembedded.Tracer
	_traceotelembedded.TracerProvider
	_metricotelembedded.Float64Histogram
}

type MockMeasurementOption_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMeasurementOption) EXPECT() *MockMeasurementOption_Expecter {
	return &MockMeasurementOption_Expecter{mock: &_m.Mock}
}

// applyAdd provides a mock function for the type MockMeasurementOption
func (_mock *MockMeasurementOption) applyAdd(addConfig metric.AddConfig) metric.AddConfig {
	ret := _mock.Called(addConfig)

	if len(ret) == 0 {
		panic("no return value specified for applyAdd")
	}

	var r0 metric.AddConfig
	if returnFunc, ok := ret.Get(0).(func(metric.AddConfig) metric.AddConfig); ok {
		r0 = returnFunc(addConfig)
	} else {
		r0 = ret.Get(0).(metric.AddConfig)
	}
	return r0
}

// MockMeasurementOption_applyAdd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'applyAdd'
type MockMeasurementOption_applyAdd_Call struct {
	*mock.Call
}

// applyAdd is a helper method to define mock.On call
//   - addConfig metric.AddConfig
func (_e *MockMeasurementOption_Expecter) applyAdd(addConfig interface{}) *MockMeasurementOption_applyAdd_Call {
	return &MockMeasurementOption_applyAdd_Call{Call: _e.mock.On("applyAdd", addConfig)}
}

func (_c *MockMeasurementOption_applyAdd_Call) Run(run func(addConfig metric.AddConfig)) *MockMeasurementOption_applyAdd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 metric.AddConfig
		if args[0] != nil {
			arg0 = args[0].(metric.AddConfig)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockMeasurementOption_applyAdd_Call) Return(addConfig1 metric.AddConfig) *MockMeasurementOption_applyAdd_Call {
	_c.Call.Return(addConfig1)
	return _c
}

func (_c *MockMeasurementOption_applyAdd_Call) RunAndReturn(run func(addConfig metric.AddConfig) metric.AddConfig) *MockMeasurementOption_applyAdd_Call {
	_c.Call.Return(run)
	return _c
}

// applyObserve provides a mock function for the type MockMeasurementOption
func (_mock *MockMeasurementOption) applyObserve(observeConfig metric.ObserveConfig) metric.ObserveConfig {
	ret := _mock.Called(observeConfig)

	if len(ret) == 0 {
		panic("no return value specified for applyObserve")
	}

	var r0 metric.ObserveConfig
	if returnFunc, ok := ret.Get(0).(func(metric.ObserveConfig) metric.ObserveConfig); ok {
		r0 = returnFunc(observeConfig)
	} else {
		r0 = ret.Get(0).(metric.ObserveConfig)
	}
	return r0
}

// MockMeasurementOption_applyObserve_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'applyObserve'
type MockMeasurementOption_applyObserve_Call struct {
	*mock.Call
}

// applyObserve is a helper method to define mock.On call
//   - observeConfig metric.ObserveConfig
func (_e *MockMeasurementOption_Expecter) applyObserve(observeConfig interface{}) *MockMeasurementOption_applyObserve_Call {
	return &MockMeasurementOption_applyObserve_Call{Call: _e.mock.On("applyObserve", observeConfig)}
}

func (_c *MockMeasurementOption_applyObserve_Call) Run(run func(observeConfig metric.ObserveConfig)) *MockMeasurementOption_applyObserve_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 metric.ObserveConfig
		if args[0] != nil {
			arg0 = args[0].(metric.ObserveConfig)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockMeasurementOption_applyObserve_Call) Return(observeConfig1 metric.ObserveConfig) *MockMeasurementOption_applyObserve_Call {
	_c.Call.Return(observeConfig1)
	return _c
}

func (_c *MockMeasurementOption_applyObserve_Call) RunAndReturn(run func(observeConfig metric.ObserveConfig) metric.ObserveConfig) *MockMeasurementOption_applyObserve_Call {
	_c.Call.Return(run)
	return _c
}

// applyRecord provides a mock function for the type MockMeasurementOption
func (_mock *MockMeasurementOption) applyRecord(recordConfig metric.RecordConfig) metric.RecordConfig {
	ret := _mock.Called(recordConfig)

	if len(ret) == 0 {
		panic("no return value specified for applyRecord")
	}

	var r0 metric.RecordConfig
	if returnFunc, ok := ret.Get(0).(func(metric.RecordConfig) metric.RecordConfig); ok {
		r0 = returnFunc(recordConfig)
	} else {
		r0 = ret.Get(0).(metric.RecordConfig)
	}
	return r0
}

// MockMeasurementOption_applyRecord_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'applyRecord'
type MockMeasurementOption_applyRecord_Call struct {
	*mock.Call
}

// applyRecord is a helper method to define mock.On call
//   - recordConfig metric.RecordConfig
func (_e *MockMeasurementOption_Expecter) applyRecord(recordConfig interface{}) *MockMeasurementOption_applyRecord_Call {
	return &MockMeasurementOption_applyRecord_Call{Call: _e.mock.On("applyRecord", recordConfig)}
}

func (_c *MockMeasurementOption_applyRecord_Call) Run(run func(recordConfig metric.RecordConfig)) *MockMeasurementOption_applyRecord_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 metric.RecordConfig
		if args[0] != nil {
			arg0 = args[0].(metric.RecordConfig)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockMeasurementOption_applyRecord_Call) Return(recordConfig1 metric.RecordConfig) *MockMeasurementOption_applyRecord_Call {
	_c.Call.Return(recordConfig1)
	return _c
}

func (_c *MockMeasurementOption_applyRecord_Call) RunAndReturn(run func(recordConfig metric.RecordConfig) metric.RecordConfig) *MockMeasurementOption_applyRecord_Call {
	_c.Call.Return(run)
	return _c
}
