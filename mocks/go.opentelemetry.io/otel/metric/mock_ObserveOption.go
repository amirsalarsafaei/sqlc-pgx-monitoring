// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package metric

import (
	mock "github.com/stretchr/testify/mock"
	"go.opentelemetry.io/otel/metric"

	_metricotelembedded "go.opentelemetry.io/otel/metric/embedded"
	_traceotelembedded "go.opentelemetry.io/otel/trace/embedded"
)

// NewMockObserveOption creates a new instance of MockObserveOption. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockObserveOption(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockObserveOption {
	mock := &MockObserveOption{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockObserveOption is an autogenerated mock type for the ObserveOption type
type MockObserveOption struct {
	mock.Mock
	_metricotelembedded.Meter
	_metricotelembedded.MeterProvider
	_traceotelembedded.Span
	_traceotelembedded.Tracer
	_traceotelembedded.TracerProvider
	_metricotelembedded.Float64Histogram
}

type MockObserveOption_Expecter struct {
	mock *mock.Mock
}

func (_m *MockObserveOption) EXPECT() *MockObserveOption_Expecter {
	return &MockObserveOption_Expecter{mock: &_m.Mock}
}

// applyObserve provides a mock function for the type MockObserveOption
func (_mock *MockObserveOption) applyObserve(observeConfig metric.ObserveConfig) metric.ObserveConfig {
	ret := _mock.Called(observeConfig)

	if len(ret) == 0 {
		panic("no return value specified for applyObserve")
	}

	var r0 metric.ObserveConfig
	if returnFunc, ok := ret.Get(0).(func(metric.ObserveConfig) metric.ObserveConfig); ok {
		r0 = returnFunc(observeConfig)
	} else {
		r0 = ret.Get(0).(metric.ObserveConfig)
	}
	return r0
}

// MockObserveOption_applyObserve_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'applyObserve'
type MockObserveOption_applyObserve_Call struct {
	*mock.Call
}

// applyObserve is a helper method to define mock.On call
//   - observeConfig metric.ObserveConfig
func (_e *MockObserveOption_Expecter) applyObserve(observeConfig interface{}) *MockObserveOption_applyObserve_Call {
	return &MockObserveOption_applyObserve_Call{Call: _e.mock.On("applyObserve", observeConfig)}
}

func (_c *MockObserveOption_applyObserve_Call) Run(run func(observeConfig metric.ObserveConfig)) *MockObserveOption_applyObserve_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 metric.ObserveConfig
		if args[0] != nil {
			arg0 = args[0].(metric.ObserveConfig)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockObserveOption_applyObserve_Call) Return(observeConfig1 metric.ObserveConfig) *MockObserveOption_applyObserve_Call {
	_c.Call.Return(observeConfig1)
	return _c
}

func (_c *MockObserveOption_applyObserve_Call) RunAndReturn(run func(observeConfig metric.ObserveConfig) metric.ObserveConfig) *MockObserveOption_applyObserve_Call {
	_c.Call.Return(run)
	return _c
}
