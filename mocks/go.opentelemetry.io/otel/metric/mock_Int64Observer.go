// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package metric

import (
	mock "github.com/stretchr/testify/mock"
	"go.opentelemetry.io/otel/metric"

	_metricotelembedded "go.opentelemetry.io/otel/metric/embedded"
	_traceotelembedded "go.opentelemetry.io/otel/trace/embedded"
)

// NewMockInt64Observer creates a new instance of MockInt64Observer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockInt64Observer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockInt64Observer {
	mock := &MockInt64Observer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockInt64Observer is an autogenerated mock type for the Int64Observer type
type MockInt64Observer struct {
	mock.Mock
	_metricotelembedded.Meter
	_metricotelembedded.MeterProvider
	_traceotelembedded.Span
	_traceotelembedded.Tracer
	_traceotelembedded.TracerProvider
	_metricotelembedded.Float64Histogram
}

type MockInt64Observer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockInt64Observer) EXPECT() *MockInt64Observer_Expecter {
	return &MockInt64Observer_Expecter{mock: &_m.Mock}
}

// Observe provides a mock function for the type MockInt64Observer
func (_mock *MockInt64Observer) Observe(value int64, options ...metric.ObserveOption) {
	// metric.ObserveOption
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, value)
	_ca = append(_ca, _va...)
	_mock.Called(_ca...)
	return
}

// MockInt64Observer_Observe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Observe'
type MockInt64Observer_Observe_Call struct {
	*mock.Call
}

// Observe is a helper method to define mock.On call
//   - value int64
//   - options ...metric.ObserveOption
func (_e *MockInt64Observer_Expecter) Observe(value interface{}, options ...interface{}) *MockInt64Observer_Observe_Call {
	return &MockInt64Observer_Observe_Call{Call: _e.mock.On("Observe",
		append([]interface{}{value}, options...)...)}
}

func (_c *MockInt64Observer_Observe_Call) Run(run func(value int64, options ...metric.ObserveOption)) *MockInt64Observer_Observe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int64
		if args[0] != nil {
			arg0 = args[0].(int64)
		}
		var arg1 []metric.ObserveOption
		variadicArgs := make([]metric.ObserveOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(metric.ObserveOption)
			}
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockInt64Observer_Observe_Call) Return() *MockInt64Observer_Observe_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockInt64Observer_Observe_Call) RunAndReturn(run func(value int64, options ...metric.ObserveOption)) *MockInt64Observer_Observe_Call {
	_c.Run(run)
	return _c
}

// int64Observer provides a mock function for the type MockInt64Observer
func (_mock *MockInt64Observer) int64Observer() {
	_mock.Called()
	return
}

// MockInt64Observer_int64Observer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'int64Observer'
type MockInt64Observer_int64Observer_Call struct {
	*mock.Call
}

// int64Observer is a helper method to define mock.On call
func (_e *MockInt64Observer_Expecter) int64Observer() *MockInt64Observer_int64Observer_Call {
	return &MockInt64Observer_int64Observer_Call{Call: _e.mock.On("int64Observer")}
}

func (_c *MockInt64Observer_int64Observer_Call) Run(run func()) *MockInt64Observer_int64Observer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockInt64Observer_int64Observer_Call) Return() *MockInt64Observer_int64Observer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockInt64Observer_int64Observer_Call) RunAndReturn(run func()) *MockInt64Observer_int64Observer_Call {
	_c.Run(run)
	return _c
}
