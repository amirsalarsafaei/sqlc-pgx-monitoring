// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package trace

import (
	mock "github.com/stretchr/testify/mock"
	"go.opentelemetry.io/otel/trace"

	_metricotelembedded "go.opentelemetry.io/otel/metric/embedded"
	_traceotelembedded "go.opentelemetry.io/otel/trace/embedded"
)

// NewMockTracerProvider creates a new instance of MockTracerProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTracerProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTracerProvider {
	mock := &MockTracerProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTracerProvider is an autogenerated mock type for the TracerProvider type
type MockTracerProvider struct {
	mock.Mock
	_metricotelembedded.Meter
	_metricotelembedded.MeterProvider
	_traceotelembedded.Span
	_traceotelembedded.TracerProvider
	_metricotelembedded.Float64Histogram
}

type MockTracerProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTracerProvider) EXPECT() *MockTracerProvider_Expecter {
	return &MockTracerProvider_Expecter{mock: &_m.Mock}
}

// Tracer provides a mock function for the type MockTracerProvider
func (_mock *MockTracerProvider) Tracer(name string, options ...trace.TracerOption) trace.Tracer {
	// trace.TracerOption
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, name)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Tracer")
	}

	var r0 trace.Tracer
	if returnFunc, ok := ret.Get(0).(func(string, ...trace.TracerOption) trace.Tracer); ok {
		r0 = returnFunc(name, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(trace.Tracer)
		}
	}
	return r0
}

// MockTracerProvider_Tracer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Tracer'
type MockTracerProvider_Tracer_Call struct {
	*mock.Call
}

// Tracer is a helper method to define mock.On call
//   - name string
//   - options ...trace.TracerOption
func (_e *MockTracerProvider_Expecter) Tracer(name interface{}, options ...interface{}) *MockTracerProvider_Tracer_Call {
	return &MockTracerProvider_Tracer_Call{Call: _e.mock.On("Tracer",
		append([]interface{}{name}, options...)...)}
}

func (_c *MockTracerProvider_Tracer_Call) Run(run func(name string, options ...trace.TracerOption)) *MockTracerProvider_Tracer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []trace.TracerOption
		variadicArgs := make([]trace.TracerOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(trace.TracerOption)
			}
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockTracerProvider_Tracer_Call) Return(tracer trace.Tracer) *MockTracerProvider_Tracer_Call {
	_c.Call.Return(tracer)
	return _c
}

func (_c *MockTracerProvider_Tracer_Call) RunAndReturn(run func(name string, options ...trace.TracerOption) trace.Tracer) *MockTracerProvider_Tracer_Call {
	_c.Call.Return(run)
	return _c
}

// tracerProvider provides a mock function for the type MockTracerProvider
func (_mock *MockTracerProvider) tracerProvider() {
	_mock.Called()
	return
}

// MockTracerProvider_tracerProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'tracerProvider'
type MockTracerProvider_tracerProvider_Call struct {
	*mock.Call
}

// tracerProvider is a helper method to define mock.On call
func (_e *MockTracerProvider_Expecter) tracerProvider() *MockTracerProvider_tracerProvider_Call {
	return &MockTracerProvider_tracerProvider_Call{Call: _e.mock.On("tracerProvider")}
}

func (_c *MockTracerProvider_tracerProvider_Call) Run(run func()) *MockTracerProvider_tracerProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTracerProvider_tracerProvider_Call) Return() *MockTracerProvider_tracerProvider_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTracerProvider_tracerProvider_Call) RunAndReturn(run func()) *MockTracerProvider_tracerProvider_Call {
	_c.Run(run)
	return _c
}
