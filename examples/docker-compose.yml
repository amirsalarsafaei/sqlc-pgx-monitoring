services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: monitoring-postgres
    environment:
      POSTGRES_USER: example
      POSTGRES_PASSWORD: complex-password
      POSTGRES_DB: example_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - monitoring-network

  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: monitoring-otel-collector
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "8888:8888" # Prometheus metrics
      - "8889:8889" # Prometheus exporter metrics
      - "4317:4317" # OTLP gRPC receiver
      - "4318:4318" # OTLP HTTP receiver
    depends_on:
      - jaeger
      - prometheus
    restart: unless-stopped
    networks:
      - monitoring-network

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: monitoring-jaeger
    ports:
      - "16686:16686" # Jaeger UI
      - "14268:14268" # Jaeger collector HTTP
      - "14250:14250" # Jaeger collector gRPC
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    restart: unless-stopped
    networks:
      - monitoring-network

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: monitoring-prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - monitoring-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: monitoring-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_FEATURE_TOGGLES_ENABLE=traceqlEditor,correlations
      - GF_LOG_LEVEL=debug
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
      - ./grafana/grafana.ini:/etc/grafana/grafana.ini
    depends_on:
      - prometheus
      - jaeger
      - otel-collector
    networks:
      - monitoring-network

  # Database migrations
  migrate:
    image: migrate/migrate
    container_name: monitoring-migrate
    volumes:
      - ./db/migrations:/migrations
    command: ["-path", "/migrations/", "-database", "postgres://example:complex-password@postgres:5432/example_db?sslmode=disable", "up"]
    depends_on:
      - postgres
    networks:
      - monitoring-network
    restart: "no"

  # Sample Go application
  sample-app:
    build:
      context: ../
      dockerfile: ./examples/Dockerfile
    container_name: monitoring-sample-app
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=otel-collector:4317
      - OTEL_EXPORTER_OTLP_INSECURE=true
      - OTEL_SERVICE_NAME=sqlc-pgx-monitoring-example
      - OTEL_SERVICE_VERSION=1.0.0
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=example
      - DB_PASSWORD=complex-password
      - DB_NAME=example_db
    depends_on:
      - postgres
      - migrate
      - otel-collector
    ports:
      - "8080:8080"
    networks:
      - monitoring-network

volumes:
  postgres_data:
  prometheus_data:
  grafana_data:

networks:
  monitoring-network:
    driver: bridge
