// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package exampletable

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
	mock "github.com/stretchr/testify/mock"

	_metricotelembedded "go.opentelemetry.io/otel/metric/embedded"
	_traceotelembedded "go.opentelemetry.io/otel/trace/embedded"
)

// NewMockQuerier creates a new instance of MockQuerier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockQuerier(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockQuerier {
	mock := &MockQuerier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockQuerier is an autogenerated mock type for the Querier type
type MockQuerier struct {
	mock.Mock
	_metricotelembedded.Meter
	_metricotelembedded.MeterProvider
	_traceotelembedded.Span
	_traceotelembedded.Tracer
	_traceotelembedded.TracerProvider
	_metricotelembedded.Float64Histogram
}

type MockQuerier_Expecter struct {
	mock *mock.Mock
}

func (_m *MockQuerier) EXPECT() *MockQuerier_Expecter {
	return &MockQuerier_Expecter{mock: &_m.Mock}
}

// ExampleQuery provides a mock function for the type MockQuerier
func (_mock *MockQuerier) ExampleQuery(ctx context.Context, db DBTX, foo pgtype.Text) ([]ExampleTable, error) {
	ret := _mock.Called(ctx, db, foo)

	if len(ret) == 0 {
		panic("no return value specified for ExampleQuery")
	}

	var r0 []ExampleTable
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, DBTX, pgtype.Text) ([]ExampleTable, error)); ok {
		return returnFunc(ctx, db, foo)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, DBTX, pgtype.Text) []ExampleTable); ok {
		r0 = returnFunc(ctx, db, foo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ExampleTable)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, DBTX, pgtype.Text) error); ok {
		r1 = returnFunc(ctx, db, foo)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_ExampleQuery_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExampleQuery'
type MockQuerier_ExampleQuery_Call struct {
	*mock.Call
}

// ExampleQuery is a helper method to define mock.On call
//   - ctx context.Context
//   - db DBTX
//   - foo pgtype.Text
func (_e *MockQuerier_Expecter) ExampleQuery(ctx interface{}, db interface{}, foo interface{}) *MockQuerier_ExampleQuery_Call {
	return &MockQuerier_ExampleQuery_Call{Call: _e.mock.On("ExampleQuery", ctx, db, foo)}
}

func (_c *MockQuerier_ExampleQuery_Call) Run(run func(ctx context.Context, db DBTX, foo pgtype.Text)) *MockQuerier_ExampleQuery_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 DBTX
		if args[1] != nil {
			arg1 = args[1].(DBTX)
		}
		var arg2 pgtype.Text
		if args[2] != nil {
			arg2 = args[2].(pgtype.Text)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockQuerier_ExampleQuery_Call) Return(exampleTables []ExampleTable, err error) *MockQuerier_ExampleQuery_Call {
	_c.Call.Return(exampleTables, err)
	return _c
}

func (_c *MockQuerier_ExampleQuery_Call) RunAndReturn(run func(ctx context.Context, db DBTX, foo pgtype.Text) ([]ExampleTable, error)) *MockQuerier_ExampleQuery_Call {
	_c.Call.Return(run)
	return _c
}

// ExampleQuery2 provides a mock function for the type MockQuerier
func (_mock *MockQuerier) ExampleQuery2(ctx context.Context, db DBTX, foo pgtype.Text) ([]ExampleTable, error) {
	ret := _mock.Called(ctx, db, foo)

	if len(ret) == 0 {
		panic("no return value specified for ExampleQuery2")
	}

	var r0 []ExampleTable
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, DBTX, pgtype.Text) ([]ExampleTable, error)); ok {
		return returnFunc(ctx, db, foo)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, DBTX, pgtype.Text) []ExampleTable); ok {
		r0 = returnFunc(ctx, db, foo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ExampleTable)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, DBTX, pgtype.Text) error); ok {
		r1 = returnFunc(ctx, db, foo)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_ExampleQuery2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExampleQuery2'
type MockQuerier_ExampleQuery2_Call struct {
	*mock.Call
}

// ExampleQuery2 is a helper method to define mock.On call
//   - ctx context.Context
//   - db DBTX
//   - foo pgtype.Text
func (_e *MockQuerier_Expecter) ExampleQuery2(ctx interface{}, db interface{}, foo interface{}) *MockQuerier_ExampleQuery2_Call {
	return &MockQuerier_ExampleQuery2_Call{Call: _e.mock.On("ExampleQuery2", ctx, db, foo)}
}

func (_c *MockQuerier_ExampleQuery2_Call) Run(run func(ctx context.Context, db DBTX, foo pgtype.Text)) *MockQuerier_ExampleQuery2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 DBTX
		if args[1] != nil {
			arg1 = args[1].(DBTX)
		}
		var arg2 pgtype.Text
		if args[2] != nil {
			arg2 = args[2].(pgtype.Text)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockQuerier_ExampleQuery2_Call) Return(exampleTables []ExampleTable, err error) *MockQuerier_ExampleQuery2_Call {
	_c.Call.Return(exampleTables, err)
	return _c
}

func (_c *MockQuerier_ExampleQuery2_Call) RunAndReturn(run func(ctx context.Context, db DBTX, foo pgtype.Text) ([]ExampleTable, error)) *MockQuerier_ExampleQuery2_Call {
	_c.Call.Return(run)
	return _c
}
