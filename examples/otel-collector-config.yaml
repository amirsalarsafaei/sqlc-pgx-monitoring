receivers:
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      http:
        endpoint: 0.0.0.0:4318

  # Prometheus receiver to scrape metrics
  prometheus:
    config:
      scrape_configs:
        - job_name: "otel-collector"
          scrape_interval: 10s
          static_configs:
            - targets: ["0.0.0.0:8888"]
        - job_name: "sample-app"
          scrape_interval: 5s
          static_configs:
            - targets: ["sample-app:8080"]

processors:
  batch:
    timeout: 1s
    send_batch_size: 1024
    send_batch_max_size: 2048

  # Resource processor to add service information
  resource:
    attributes:
      - key: service.name
        value: sqlc-pgx-monitoring-collector
        action: upsert
      - key: service.version
        value: 1.0.0
        action: upsert

  # Memory limiter processor
  memory_limiter:
    limit_mib: 128
    check_interval: 1s

  # Attributes processor for database operations
  attributes:
    actions:
      - key: db.operation
        action: upsert
        from_attribute: db.statement
      - key: db.collection.name
        action: upsert
        from_attribute: db.sql.table

exporters:
  # Jaeger exporter for traces via OTLP HTTP
  otlphttp/jaeger:
    endpoint: http://jaeger:4318
    tls:
      insecure: true

  # Prometheus exporter for metrics
  prometheus:
    endpoint: "0.0.0.0:8889"
    const_labels:
      environment: development

  # Debug exporter for debugging
  debug:
    verbosity: detailed

service:
  extensions: []
  pipelines:
    traces:
      receivers: [otlp]
      processors: [memory_limiter, resource, attributes, batch]
      exporters: [otlphttp/jaeger, debug]

    metrics:
      receivers: [otlp, prometheus]
      processors: [memory_limiter, resource, batch]
      exporters: [prometheus, debug]

    logs:
      receivers: [otlp]
      processors: [memory_limiter, resource, batch]
      exporters: [debug]

  telemetry:
    logs:
      level: "debug"
